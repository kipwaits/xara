
name: CMake Build

env:
  CMAKE_VERSION: 3.20.1
  BUILD_TYPE: Debug

on:
  push:
    branches: [main]

  pull_request:
    branches: [main]

permissions:
  contents: write
  pull-requests: write

jobs:
  build-ubuntu:
    name: Ubuntu bundled build
    runs-on: ubuntu-latest
    steps:
    #- uses: claudioperez/OpenSees@cmake-build
    - uses: actions/checkout@v2
      #with: {ref: cmake-build}

    - name: Install Libraries
      run:
        sudo apt-get install tcl-dev libopenblas-dev

    - name: Build
      id: build
      run: |
        mkdir build
        cd build
        cmake .. -DNoOpenSeesPyRT:BOOL=TRUE
        cmake --build . --target OpenSeesRT -j3 2>&1 | tee build.log
        # Count lines containing "warning:"
        export XARA_SRC_WARN_COUNT=$(grep -c "warning:" build.log || true)
        echo "XARA_SRC_WARN_COUNT=$XARA_SRC_WARN_COUNT" >> $GITHUB_ENV
        echo "warnings=$XARA_SRC_WARN_COUNT" >> $GITHUB_OUTPUT 
        echo "::warning::We found $XARA_SRC_WARN_COUNT warnings"

#   - name: Count warnings
#     id: count
#     run: |

    - name: Comment on PR with warning count
      # Only run if it's a PR (not just a push)
#     if: ${{ github.event_name == 'pull_request' }}
      if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}

      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // Read the warning count from the 'build' step output (or from the env var)
          const warningCount = parseInt(`${{ steps.build.outputs.warnings }}`, 10);

          // Create a comment on the PR
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: `We found **${warningCount}** compiler warnings in the latest build.`
          });

#   - name: Verification
#     run: |
#       cd build
#       make trussExample
#       make planeFrame

        #ctest
        #cd ./EXAMPLES/verification/ && ../../build/OpenSeesTcl runVerificationSuite.tcl

  build-mac:
    name: Mac Build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
#     - uses: actions/setup-python@v4
#       with:
#         python-version: "3.11"
#     - name: Install Library
#       run: |
#        ln -s /usr/local/bin/gfortran-11 /usr/local/bin/gfortran

      - name: Install Libraries
        run: brew install tcl-tk libomp

      - name: Build
        run: |
          mkdir build
          cd build
          export FC=$(brew --prefix gcc)/bin/gfortran-$(brew list gcc | grep -Eo 'gfortran-[0-9]+' | head -n1 | grep -Eo '[0-9]+')
          cmake .. \
            -DTCL_INCLUDE_PATH="$(brew --prefix tcl-tk)/include" \
            -DTCL_LIBRARY="$(brew --prefix tcl-tk)/lib/libtclstub8.6.a" \
            -DNoOpenSeesPyRT:BOOL=TRUE
          cmake --build . --target OpenSeesRT -j3

#     - name: Verification
#       run: |
#         cd ./EXAMPLES/Verification/


# Not building on Windows until we can figure out how to use Fortran
# with Github Actions
# build-win32:
#   name: Build on Windows
#   runs-on: [windows-latest]
#   steps:
#   - uses: awvwgk/setup-fortran@v1
#     with:
#       compiler: "intel"
#       version:  "2023.1"

#   - name: Checkout sources
#     uses: actions/checkout@v2
#     with: {ref: cmake-build}
#   
#   - name: Install Conan
#     uses: turtlebrowser/get-conan@main
  
  
#   - name: Build
#     run: |
#       mkdir build
#       cd build
#       cmake ..
#       cmake --build . --target OpenSeesRT -j5


